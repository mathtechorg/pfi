<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-workflow" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Codespace Workflow</title>

  <introduction>
    <p>
      Once you create content in PreTeXt, it is time to <term>build</term> it, <term>view</term> the result to make sure it looks good, and when you are ready, <term>deploy</term> your web output to a live webpage for others to marvel at.
    </p>

    <p>
      In this chapter we will walk through the steps to do this inside a codespace environment.
    </p>
  </introduction>

  <section xml:id="sec-prerequisites">
    <title>Prerequisites</title>
    <p>
      In this chapter we assume you are working in a GitHub Codespaces, and have already initialized a <pretext /> project there.  A few notes:
      <ul>
        <li>
          <p>
            If you do not have a <term>repository</term> for a <pretext /> project yet, go to <url href="https://github.com/pretextbook/pretext-codespace" />.  On that page, below a short list of files, you will see a README that gives instruction for creating a project from that template.
          </p>
        </li>
        <li>
          <p>
            If you have a project already (on GitHub, in a repository), then to get back to the codespaces, navigate to the repository on GitHub.com.  When you are on the page for your repository, you can restart or create a Codespace using the green (or blue) <q>Code</q> button. 
          </p>
        </li>
        <li>
          <p>
            Most of the content below is also available as a walkthrough in VS Code.  Open the Command Palette (or use the search bar at the top of the window and start with <q>&gt;</q>) and search for <q>Welcome: Open Walkthrough...</q>.  Then select the <q>Get Started with PreTeXt</q> option.
          </p>
        </li>
        <li>
          <p>
            If you prefer to work locally, almost all of what follows will be exactly the same if you use VS Code on your own computer (but you will need to ensure you have <pretext /> and other tools installed).
          </p>
        </li>
      </ul>
    </p>
  </section>

  <section xml:id="sec-build">
    <title>Build</title>
    <p>
      Inside the VS Code window you opened through codespaces, have a <c>.ptx</c> file open (these should all be inside your <c>source</c> folder).  You can build your entire project in a few different ways.
      <ul>
        <li>
          <p>
            Click the <q>PreTeXt</q> button in the VS Code status bar (just left of center on the bottom of the window), or use the keyboard shortcut <c>CTRL+ALT+p</c>, to bring up the PreTeXt Commands menu.  Select <q>Build default target</q> from the menu.  This will build your files and put the output inside the <c>output/web</c> folder.
          </p>
        </li>
        <li>
          <p>
            You can type <c>pretext build web</c> from the terminal (this uses the CLI directly).  If you don't see a terminal window at the bottom of the screen, you can open it with <c>CTRL+`</c> or go to <q>Terminal</q> menu and select <q>New Terminal</q>.
          </p>
        </li>
      </ul>
    </p>

    <p>
      That should be it.  If you get a message proclaiming <q>Build successful!</q>, you can jump to the next section.
    </p>

    <note>
      <p>
        All shortcuts listed in this guide assume you are using Windows or Linux.  If you are using a Mac, you will need to use <c>CMD</c> instead of <c>CTRL</c>.
      </p>
    </note>

    <p>
      If your document contains some more complicated elements, you might need to <term>generate</term> them for them to show up.  The elements that require this are (depending on what your build target is):
      <ul>
        <li><tag>latex-image</tag></li>
        <li><tag>prefigure</tag></li>
        <li><tag>asymptote</tag></li>
        <li><tag>sageplot</tag></li>
        <li><tag>youtube</tag> (for thumbnail previews)</li>
        <li><tag>webwork</tag></li>
        <li><tag>codelense</tag></li>
      </ul>
    </p>

    <p>
      All such elements <em>should</em> get generated automatically when you build.  If you don't change them, then the next time you run a build things should be faster.  
    </p>

    <note>  
      <p>
        Note that generating assets requires additional software, like <latex /> or Sage.  The default Codespace setup has <latex /> installed, but not Sage.  If you want to use <tag>sageplot</tag> images, or run into problems generateing tikz images, look at the README that is included in your project.
      </p>
    </note>
  </section>

  <section xml:id="sec-previewing">
    <title>Previewing</title>
    <p>
      You can check the output of what you built using the <term>View</term> command.  Again, you can access this in multiple ways. If you use the <pretext /> menu and select <q>View full document</q>, you will get a choice of targets to view.  At this point, you still want to view the <c>web</c> target.
    </p>

    <p>
      If you like using the command line, in a terminal enter <c>pretext view web</c>.  This should open a new tab in your browser that will display your book. 
    </p>

    <p>
      An alternative way to preview your work is to use a tool called <term>CodeChat</term>.  From the <pretext /> menu, select <q>Preview file with CodeChat.</q>  This requires that you are looking at a specific <pretext /> file (and as you navigate to other files, the preview will follow you, usually).  You should see a preview in a new tap in your editor, right next to your source.
    </p>
  </section>

  <section xml:id="sec-deploy">
    <title>Deploy</title>
    <p>
      So you have worked tirelessly to prepare course notes or a book, built and previewed, and now you are ready to share the results of your efforts with the world.  It's time to <term>deploy</term> your project.
    </p>

    <p>
      With the codespace setup this is simple.  From the <pretext /> menu, select <q>Deploy</q>.  This will automatically take the most recent build of your web target and host it through <url href="https://pages.github.com/">GitHub Pages</url>.  Watch the output pane for a link to your published site. (It can take a few minutes for the site to get set up or updated; there should be another link to view the progress of the GitHub <q>action</q> that reports the progress.)
    </p>

    <p>
      You can find a link to the site later by going back to your repository on GitHub.  Click the <q>Settings</q> tab, and scroll down to the <q>Pages</q> section.  There you will find a link to your site.
    </p>
  </section>

  <section xml:id="sec-saving">
    <title>Important: Saving your work</title>
    <p>
      Using codespaces will keep all your files <q>in the cloud</q> on GitHub's server.  As long as you don't delete your codespace (which GitHub might do after a few days automatically, depending on your settings), your files will be saved there.  However, you will want to <term>push</term> these files to your <term>repository</term> on GitHub to make this save perminent.  This has the benefit of allowing collaborators to access your files as well (your codespace is unique to your account).
    </p>

    <p>
      If you deploy your project, your changes will be saved and pushed to GitHub automatically.  However, if you are not deploying, you will need to do this manually.
    </p>

    <p>
      There is a <em>lot</em> to learn about <term>git</term> (the software behind GitHub), but luckily using VS Code lets you do everything you need using menus (you don't need to use the command line, unless you want to).  Everything can be controlled using the <term>Source Control</term> view: it should be third from the top on the very left of the window, an icon with splitting paths, and likely a badge showing how many files you have changed.
    </p>

    <p>
      Here are the basic concepts you need to understand.
      <ul>
        <li>
          <p>
            The program <term>git</term> keeps track of all the changes you make to files inside of your <term>repository</term> (in this case, the folder containing your project). 
          </p>
        </li>
        <li>
          <p>
            Once you have edited your files and are happy with all of them, you tell git to track the set of changes as a <term>commit</term>.  This creates a handy <em>breakpoint</em> you could return to if you want to go back to an earlier version.
           </p> 
            
           <p>
            There are two steps to creating a commit (which you can often do all at once in practice):
            <ol>
              <li>
                <p>
                  You <term>stage</term> the files you want to update in the commit.
                </p>
                <p>
                  You <term>commit</term> the stage files including a <term>commit message</term>.
                </p>
              </li>
            </ol>
            Doing this in two steps can be helpful if you want to commit only some of the files that have changed.
          </p>
        </li>
        <li>
          <p>
            Once you have one or more commits, you need to sync these changes with GitHub.  To <q>upload</q> your changes, you <term>push</term> the repository.  To download changes that you are someone else made, you <term>pull</term> the repository.  In VS Code, you might have the option to <term>sync</term>, which does both of these at once.
          </p>
        </li>
      </ul>
    </p>

    <p>
      Now, how do we do these things in VS Code?  Start by looking at the Source Control view.  You will notice a list of files that were changed.  You can click on any of these to see what the changes are (you will see a side-by-side view of the original and updated version).
    </p>

    <p>
      If you are comfortable staging and committing in one step, you can simply write yourself a short message in the textbox above the big green <q>Commit</q> button, and click the button.  If you want to stage first, click the + next to each file under <q>changes</q> to stage them.
    </p>

    <p>
      The green button should now turn into a <q>Sync</q> button.  When you click that, it will do a quick pull and then a push, to sync changes with GitHub.
    </p>

    <p>
      The only small point about using git is that not all files will be tracked.  This is on purpose, since temporary files really should not be <q>remembered</q> using this version control setting.  Which files or types of files are ignored by git is controled by the <q>.gitignore</q> file in your repository.
    </p>

    <p>
      In particular, we do not track the output of builds.  Git is used to track progress on your source, which you build into output at any time.  If you want others to be able to see the output of your work without building it themselves, you need to deploy your work.
    </p>
  </section>


</chapter>